using System;

namespace APlusMalware.LogicLaserPlugin
{
    public class LogicLptReceiver : LogicReceiver
    {
        private Single _lastOriginalPacketSize;
        private Single _lastScaledPacketSize;
        private Byte _lastValue;
        private Boolean _set;
        public LogicLptReceiver(Segment segment, Int64 x, Int64 y, Int64 z, UInt16 cubeType, Byte flags, UInt16 value)
            : base(segment, x, y, z, cubeType, flags, value)
        {
        }

        protected override void UpdateTarget(SegmentEntity entity, Byte value, Boolean reset)
        {
            var lpt = entity as LaserPowerTransmitter;
            if (lpt == null) return;

            Single packetSize = lpt.mrPowerPacketSize;
            Boolean hasLptPacketSizeChanged = !_set || packetSize != _lastScaledPacketSize;

            if (reset)
            {
                // Only reset the LPT if we've changed it
                if (!_set)
                    return;

                if (!hasLptPacketSizeChanged)
                    lpt.mrPowerPacketSize = _lastOriginalPacketSize; // Set the packet size back to original
                                                                     // Otherwise the lpt has changed it's tier and reset itself already

                _lastOriginalPacketSize = 0;
                _lastScaledPacketSize = 0;
                _lastValue = 0;
                _set = false;
                return;
            }

            Boolean hasScaleChanged = _lastValue != value;

            if (!hasLptPacketSizeChanged && !hasScaleChanged) // Only update if something has changed
                return;

            Single scale = (Single)value / Byte.MaxValue;
            Single originalPacketSize = hasLptPacketSizeChanged ? packetSize : _lastOriginalPacketSize;
            Single scaledPacketSize = scale * originalPacketSize;

            lpt.mrPowerPacketSize = scaledPacketSize;

            _lastOriginalPacketSize = originalPacketSize;
            _lastScaledPacketSize = scaledPacketSize;
            _lastValue = value;
            _set = true;
        }
    }
}
