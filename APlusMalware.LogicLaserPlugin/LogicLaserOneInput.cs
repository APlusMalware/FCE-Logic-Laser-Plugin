using System;
using APlusMalware.LogicGraph;

namespace APlusMalware.LogicLaserPlugin
{
    public abstract class LogicLaserOneInput : LaserLogicBase
    {
        private Byte _backDirection;
        private Byte _leftDirection;
        private Byte _rightDirection;
        private Byte _topDirection;
        private Byte _bottomDirection;

        protected LogicLaserOneInput(eSegmentEntity segmentEntity, SpawnableObjectEnum spawnableObject, Int64 x, Int64 y,
            Int64 z, UInt16 cube, Byte flags, UInt16 value, Segment segment, LogicNode<Byte> node)
            : base(segmentEntity, spawnableObject, x, y, z, cube, flags, value, segment, node)
        {
            UpdateFaces(flags);
        }

        public override SByte FindFaceInputIndex(Byte direction)
        {
            if (direction == _backDirection)
                return 0;
            if (direction == _leftDirection)
                return 1;
            if (direction == _rightDirection)
                return 2;
            if (direction == _topDirection)
                return 3;
            if (direction == _bottomDirection)
                return 4;
            return -1;
        }

        public override void OnUpdateRotation(byte flags)
        {
            base.OnUpdateRotation(flags);
            UpdateFaces(flags);
        }

        private void UpdateFaces(Byte flag)
        {
            _backDirection = Utils.CalcBackDirction(flag);
            _leftDirection = Utils.CalcLeftDirection(flag);
            _rightDirection = Utils.CalcOppositeDirection(_leftDirection);
            _topDirection = Utils.CalcTopDirection(flag);
            _bottomDirection = Utils.CalcOppositeDirection(_topDirection);
        }
    }
}
