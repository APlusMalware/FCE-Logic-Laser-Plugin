using System;

namespace APlusMalware.LogicLaserPlugin
{
    public abstract class LogicScalarReceiver : LogicSingleReceiver
    {
        private Single _lastOriginalValue;
        private Single _lastScaledValue;
        private Byte _lastLogic;
        private Boolean _set;
        protected LogicScalarReceiver(Segment segment, Int64 x, Int64 y, Int64 z, UInt16 cubeType, Byte flags, UInt16 value)
            : base(segment, x, y, z, cubeType, flags, value)
        {
        }

        protected sealed override void UpdateTarget(SegmentEntity entity, Byte[] inputValues, Boolean reset)
        {
            Byte logic = inputValues[0];
            Single value;
            if (!TryGetScalarValue(entity, out value))
                return;
            
            Boolean hasEntityValueChanged = !_set || value != _lastScaledValue;

            if (reset)
            {
                // Only reset the entity if we've changed it
                if (!_set)
                    return;

                if (!hasEntityValueChanged)
                    TrySetScalarValue(entity, _lastOriginalValue); // Set the value back to original
                // Otherwise the entity has changed and reset itself already

                _lastOriginalValue = 0;
                _lastScaledValue = 0;
                _lastLogic = 0;
                _set = false;
                return;
            }

            Boolean hasScaleChanged = _lastLogic != logic;

            if (!hasEntityValueChanged && !hasScaleChanged) // Only update if something has changed
                return;

            Single scale = (Single)logic / Byte.MaxValue;
            Single originalValue = hasEntityValueChanged ? value : _lastOriginalValue;
            Single scaledValue = scale * originalValue;

            TrySetScalarValue(entity, scaledValue);

            _lastOriginalValue = originalValue;
            _lastScaledValue = scaledValue;
            _lastLogic = logic;
            _set = true;
        }

        protected abstract Boolean TryGetScalarValue(SegmentEntity entity, out Single value);

        protected abstract Boolean TrySetScalarValue(SegmentEntity entity, Single value);
    }
}
