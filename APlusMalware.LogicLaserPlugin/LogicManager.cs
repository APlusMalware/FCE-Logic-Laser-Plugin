using System;
using System.Collections.Generic;
using APlusMalware.ByteLogic;
using UnityEngine;

namespace APlusMalware.LogicLaserPlugin
{
    public class LogicManager : FortressCraftMod
    {
        private delegate SegmentEntity EntityConstructor(
            Segment segment, Int64 x, Int64 y, Int64 z, UInt16 cubeType, Byte flags, UInt16 value);

        private readonly Dictionary<String, EntityConstructor> _constructors;

        public static LogicManager Instance { get; private set; }

        public Graph Graph { get; }

        public LogicManager()
        {
            Graph = new Graph();
            _constructors = new Dictionary<String, EntityConstructor>
            {
                { "APlusMalware.LogicLasers.Repeater",
                (segment, x, y, z, cubeType, flags, value) => new LogicLaserRepeater(segment, x, y, z, cubeType, flags, value) },

                { "APlusMalware.LogicLasers.Inverter",
                (segment, x, y, z, cubeType, flags, value) => new LogicLaserInverter(segment, x, y, z, cubeType, flags, value) },

                { "APlusMalware.LogicLasers.Splitter",
                (segment, x, y, z, cubeType, flags, value) => new LogicSplitter(segment, x, y, z, cubeType, flags, value) },

                { "APlusMalware.LogicLasers.MaxSelector",
                (segment, x, y, z, cubeType, flags, value) => new LogicLaserMaxSelector(segment, x, y, z, cubeType, flags, value) },

                { "APlusMalware.LogicLasers.Adder",
                (segment, x, y, z, cubeType, flags, value) => new LogicLaserAdder(segment, x, y, z, cubeType, flags, value) },

                { "APlusMalware.LogicLasers.OverflowChecker",
                (segment, x, y, z, cubeType, flags, value) => new LogicLaserOverflowChecker(segment, x, y, z, cubeType, flags, value) },

                { "APlusMalware.LogicLasers.EqualityChecker",
                (segment, x, y, z, cubeType, flags, value) => new LogicLaserEqualityChecker(segment, x, y, z, cubeType, flags, value) },

                { "APlusMalware.LogicLasers.Downscaler",
                (segment, x, y, z, cubeType, flags, value) => new LogicLaserDownscaler(segment, x, y, z, cubeType, flags, value) },

                { "APlusMalware.LogicLasers.Upscaler",
                (segment, x, y, z, cubeType, flags, value) => new LogicLaserUpscaler(segment, x, y, z, cubeType, flags, value) },

                { "APlusMalware.LogicLasers.PowerSensor",
                (segment, x, y, z, cubeType, flags, value) => new LogicPowerSensor(segment, x, y, z, cubeType, flags, value) },

                { "APlusMalware.LogicLasers.ConveyorSensor",
                (segment, x, y, z, cubeType, flags, value) => new LogicConveyorSensor(segment, x, y, z, cubeType, flags, value) },

                { "APlusMalware.LogicLasers.StorageSensor",
                (segment, x, y, z, cubeType, flags, value) => new LogicStorageSensor(segment, x, y, z, cubeType, flags, value) },

                { "APlusMalware.LogicLasers.CphSensor",
                (segment, x, y, z, cubeType, flags, value) => new LogicCphSensor(segment, x, y, z, cubeType, flags, value) },

                { "APlusMalware.LogicLasers.LiftSensor",
                (segment, x, y, z, cubeType, flags, value) => new LogicLiftSensor(segment, x, y, z, cubeType, flags, value) },

                { "APlusMalware.LogicLasers.ThreatSensor",
                (segment, x, y, z, cubeType, flags, value) => new LogicThreatSensor(segment, x, y, z, cubeType, flags, value) },

                { "APlusMalware.LogicLasers.MinecartSensor",
                (segment, x, y, z, cubeType, flags, value) => new LogicMinecartSensor(segment, x, y, z, cubeType, flags, value) },

                { "APlusMalware.LogicLasers.CrystalClockSensor",
                (segment, x, y, z, cubeType, flags, value) => new LogicCrystalSensor(segment, x, y, z, cubeType, flags, value) },

                { "APlusMalware.LogicLasers.ThreatLevelSensor",
                (segment, x, y, z, cubeType, flags, value) => new LogicThreatSensor(segment, x, y, z, cubeType, flags, value) },

                { "APlusMalware.LogicLasers.LptReceiver",
                (segment, x, y, z, cubeType, flags, value) => new LogicLptReceiver(segment, x, y, z, cubeType, flags, value) },

                { "APlusMalware.LogicLasers.ConveyorReceiver",
                (segment, x, y, z, cubeType, flags, value) => new LogicConveyorReceiver(segment, x, y, z, cubeType, flags, value) },

                { "APlusMalware.LogicLasers.TeleporterReceiver", 
                (segment, x, y, z, cubeType, flags, value) => new LogicTeleporterReceiver(segment, x, y, z, cubeType, flags, value) }
            };

            if (Instance == null) Instance = this;
        }

        public override ModRegistrationData Register()
        {
            var data = new ModRegistrationData();
            foreach (String key in _constructors.Keys)
                data.RegisterEntityHandler(key);
            return data;
        }

        public override void LowFrequencyUpdate()
        {
            Graph.Step();
        }

        public override void CreateSegmentEntity(ModCreateSegmentEntityParameters parameters, ModCreateSegmentEntityResults results)
        {
            var data = TerrainData.mEntries[parameters.Cube];
            EntityConstructor ctor;
            if (!_constructors.TryGetValue(data.Key, out ctor))
            {
                TerrainDataValueEntry value = data.GetValue(parameters.Value);
                if (value == null || !_constructors.TryGetValue(value.Key, out ctor))
                {
                    Debug.LogWarning($"LogicLasers CreateSegmentEntity called with unrecognized parameters? Cube: {parameters.Cube} Value {parameters.Value}");
                    return;
                }
            }
            results.Entity = ctor(parameters.Segment, parameters.X, parameters.Y, parameters.Z, parameters.Cube, parameters.Flags, parameters.Value);
        }
    }
}
