using System;
using System.Collections.Generic;
using APlusMalware.ByteLogic;

namespace APlusMalware.LogicLaserPlugin
{
    public class LogicManager : FortressCraftMod
    {
        private delegate SegmentEntity EntityConstructor(
            Segment segment, Int64 x, Int64 y, Int64 z, UInt16 cubeType, Byte flags, UInt16 value);

        private readonly Dictionary<String, EntityConstructor> _constructors;

        public static LogicManager Instance { get; private set; }

        public Graph Graph { get; }

        public LogicManager()
        {
            Graph = new Graph();
            _constructors = new Dictionary<String, EntityConstructor>();

            // Populate key-delegate dictionary
            _constructors.Add("APlusMalware.LogicLasers.Repeater",
                delegate (Segment segment, Int64 x, Int64 y, Int64 z, UInt16 cubeType, Byte flags, UInt16 value)
                { return new LogicLaserRepeater(segment, x, y, z, cubeType, flags, value); });

            _constructors.Add("APlusMalware.LogicLasers.Inverter",
                delegate (Segment segment, Int64 x, Int64 y, Int64 z, UInt16 cubeType, Byte flags, UInt16 value)
                { return new LogicLaserInverter(segment, x, y, z, cubeType, flags, value); });

            _constructors.Add("APlusMalware.LogicLasers.MaxSelector",
                delegate (Segment segment, Int64 x, Int64 y, Int64 z, UInt16 cubeType, Byte flags, UInt16 value)
                { return new LogicLaserMaxSelector(segment, x, y, z, cubeType, flags, value); });

            _constructors.Add("APlusMalware.LogicLasers.Adder",
                delegate (Segment segment, Int64 x, Int64 y, Int64 z, UInt16 cubeType, Byte flags, UInt16 value)
                { return new LogicLaserAdder(segment, x, y, z, cubeType, flags, value); });

            _constructors.Add("APlusMalware.LogicLasers.OverflowChecker",
                delegate (Segment segment, Int64 x, Int64 y, Int64 z, UInt16 cubeType, Byte flags, UInt16 value)
                { return new LogicLaserOverflowChecker(segment, x, y, z, cubeType, flags, value); });

            _constructors.Add("APlusMalware.LogicLasers.EqualityChecker",
                delegate (Segment segment, Int64 x, Int64 y, Int64 z, UInt16 cubeType, Byte flags, UInt16 value)
                { return new LogicLaserEqualityChecker(segment, x, y, z, cubeType, flags, value); });

            _constructors.Add("APlusMalware.LogicLasers.Downscaler",
                delegate (Segment segment, Int64 x, Int64 y, Int64 z, UInt16 cubeType, Byte flags, UInt16 value)
                { return new LogicLaserDownscaler(segment, x, y, z, cubeType, flags, value); });

            _constructors.Add("APlusMalware.LogicLasers.Upscaler",
                delegate (Segment segment, Int64 x, Int64 y, Int64 z, UInt16 cubeType, Byte flags, UInt16 value)
                { return new LogicLaserUpscaler(segment, x, y, z, cubeType, flags, value); });

            _constructors.Add("APlusMalware.LogicLasers.Sensor",
                delegate (Segment segment, Int64 x, Int64 y, Int64 z, UInt16 cubeType, Byte flags, UInt16 value)
                { return new LogicSensor(segment, x, y, z, cubeType, flags, value); });

            if (Instance == null) Instance = this;
        }

        public override ModRegistrationData Register()
        {
            var data = new ModRegistrationData();
            foreach (String key in _constructors.Keys)
                data.RegisterEntityHandler(key);
            return data;
        }

        public override void LowFrequencyUpdate()
        {
            Graph.Step();
        }

        public override ModCreateSegmentEntityResults CreateSegmentEntity(ModCreateSegmentEntityParameters parameters)
        {
            var results = new ModCreateSegmentEntityResults();
            var data = TerrainData.mEntries[parameters.Cube];
            EntityConstructor ctor;
            if (_constructors.TryGetValue(data.Key, out ctor))
                results.Entity = ctor(parameters.Segment, parameters.X, parameters.Y, parameters.Z, parameters.Cube, parameters.Flags, parameters.Value);
            else
                return null;
            return results;
        }
    }
}
