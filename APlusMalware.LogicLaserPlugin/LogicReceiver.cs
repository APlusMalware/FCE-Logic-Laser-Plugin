using System;
using System.Linq;
using APlusMalware.ByteLogic;
using APlusMalware.LogicGraph;
using UnityEngine;

namespace APlusMalware.LogicLaserPlugin
{
    public abstract class LogicReceiver : MachineEntity, ILogicReceiver
    {
        private Byte _bottomDirection;
        private SByte _targetXOffset;
        private SByte _targetYOffset;
        private SByte _targetZOffset;

        private readonly OnlyReceiver _node;
        private Boolean _addedToGraph;

        protected LogicReceiver(Segment segment, Int64 x, Int64 y, Int64 z, UInt16 cubeType, Byte flags, UInt16 value)
            : base(eSegmentEntity.Mod, SpawnableObjectEnum.LaserPressurePad, x, y, z, cubeType, flags, value, Vector3.zero, segment)
        {
            mbNeedsLowFrequencyUpdate = true;
            _node = new OnlyReceiver();
            UpdateFaces(flags);
        }

        protected virtual String Name { get; } = "Some Logic Receiver";

        public SByte FindFaceInputIndex(Byte direction)
        {
            if (direction != _bottomDirection)
                return 0;
            return -1;
        }

        public LogicNode<Byte> GetLogicNode()
        {
            return _node;
        }

        public override String GetPopupText()
        {
            String inputs = String.Join(", ", _node.InputValues.Select(i => i.ToString()).ToArray());
            return $"{Name}\nInput: {inputs}";
        }

        public override void OnDelete()
        {
            ResetLogic();
            LogicManager.Instance.Graph.RemoveNode(_node);
            base.OnDelete();
            UpdateEntity(true); // Force a reset on the connected entity
        }

        public override void OnUpdateRotation(Byte flags)
        {
            base.OnUpdateRotation(flags);
            UpdateFaces(flags);
        }

        public override void LowFrequencyUpdate()
        {
            if (!_addedToGraph)
            {
                LogicManager.Instance.Graph.AddNode(_node);
                _addedToGraph = true;
            }

            UpdateEntity(false);
        }

        protected abstract void UpdateTarget(SegmentEntity entity, Byte logic, Boolean reset);

        private void UpdateEntity(Boolean forceReset)
        {
            Int64 targetX = mnX + _targetXOffset;
            Int64 targetY = mnY + _targetYOffset;
            Int64 targetZ = mnZ + _targetZOffset;
            Segment segment = AttemptGetSegment(targetX, targetY, targetZ);
            if (segment == null)
                return;

            UInt16 cubeType = segment.GetCube(targetX, targetY, targetZ);
            if (CubeHelper.HasEntity(cubeType))
            {
                SegmentEntity entity = segment.SearchEntity(targetX, targetY, targetZ);

                Boolean reset = _node.ActiveInputCount == 0; // Reset the entity to defaults if the node can't be set
                if (entity != null)
                    UpdateTarget(entity, _node.InputValues[0], reset || forceReset);
            }
        }

        private void UpdateFaces(Byte flags)
        {
            _bottomDirection = Utils.CalcBottomDirection(flags);
            Vector3 vector = Vector3.Normalize(SegmentCustomRenderer.GetRotationQuaternion(flags) * Vector3.down);
            _targetXOffset = (SByte)vector.x;
            _targetYOffset = (SByte)vector.y;
            _targetZOffset = (SByte)vector.z;
        }
        
        private void ResetLogic()
        {
            _node.DisconnectAll();
        }
    }
}
